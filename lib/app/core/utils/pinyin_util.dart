// üåé Project imports:
import 'index.dart';

/// Pinyinizer Adds proper (Mandarin) Chinese tone diacritics to a string.
///
/// The four tones of Chinese are commonly represented by the numbers 1-4.
/// This package enables one to take a string with numerical tone representation
/// and transforming it into a string with proper tone diacritics.
///
class PinyinUtil {
  static final RegExp _tonePtn = RegExp(
      r"([aeiouv√º]{1,2}(n|ng|r|\'er|N|NG|R|\'ER){0,1}[1234])",
      caseSensitive: false,
      multiLine: false);
  static final RegExp _suffixPtn = RegExp(r"(n|ng|r|\'er|N|NG|R|\'ER)$",
      caseSensitive: false, multiLine: false);

  static const _toneMap = {
    'a': ['ƒÅ', '√°', '«é', '√†'],
    'ai': ['ƒÅi', '√°i', '«éi', '√†i'],
    'ao': ['ƒÅo', '√°o', '«éo', '√†o'],
    'e': ['ƒì', '√©', 'ƒõ', '√®'],
    'ei': ['ƒìi', '√©i', 'ƒõi', '√®i'],
    'i': ['ƒ´', '√≠', '«ê', '√¨'],
    'ia': ['iƒÅ', 'i√°', 'i«é', 'i√†'],
    'ie': ['iƒì', 'i√©', 'iƒõ', 'i√®'],
    'io': ['i≈ç', 'i√≥', 'i«í', 'i√≤'],
    'iu': ['i≈´', 'i√∫', 'i«î', 'i√π'],
    'o': ['≈ç', '√≥', '«í', '√≤'],
    'ou': ['≈çu', '√≥u', '«íu', '√≤u'],
    'u': ['≈´', '√∫', '«î', '√π'],
    'ua': ['uƒÅ', 'u√°', 'u«é', 'u√†'],
    'ue': ['uƒì', 'u√©', 'uƒõ', 'u√®'],
    'ui': ['uƒ´', 'u√≠', 'u«ê', 'u√¨'],
    'uo': ['u≈ç', 'u√≥', 'u«í', 'u√≤'],
    'v': ['«ñ', '«ò', '«ö', '«ú'],
    've': ['√ºƒì', '√º√©', '√ºƒõ', '√º√®'],
    '√º': ['«ñ', '«ò', '«ö', '«ú'],
    '√ºe': ['√ºƒì', '√º√©', '√ºƒõ', '√º√®']
  };

  /// [wo3,ai4,ni3] -> [w«í,√†i,n«ê]
  static List<String> transformPinyin(List<String> pinyins) {
    return _transform(pinyins.join('-')).split('-');
  }

  /// ['Êàë','Ôºå','Áà±','‰Ω†']+['w«í','√†i','n«ê'] => [w«í,'Ôºå',√†i,n«ê]
  static List<String> appendPunctuation(
      {required List<String> origin, required List<String> ref}) {
    var copy = origin.map((e) => e).toList();
    for (var i = 0; i < ref.length; i++) {
      if (!ref[i].isSingleHanzi) {
        copy.insert(i, ref[i]);
      }
    }
    return copy;
  }

  static String _transform(String text) {
    var tones = _tonePtn.allMatches(text);

    tones.forEach((tone) {
      var coda = tone.group(0);
      text = text.replaceAll(coda!, _transformCoda(coda));
    });

    return text;
  }

  static String _transformCoda(String coda) {
    var tone = coda.substring(coda.length - 1);
    var vowel = coda.substring(0, coda.length - 1);

    var suffixes = _suffixPtn.allMatches(vowel);
    var suffix;

    if (suffixes.isNotEmpty) {
      suffix = suffixes.first.group(0);
      vowel = vowel.replaceAll(suffix, '');
    }

    var replaced = _toneMap[vowel.toLowerCase()]![int.parse(tone) - 1];

    if (suffix != null) {
      replaced = replaced + suffix.toLowerCase();
    }
    return replaced;
  }
}
